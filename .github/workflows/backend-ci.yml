name: Continous Integration for Backend Application

on:
    push:
        branches: 
            - main
            - dev
            - 'feature/*'
        paths:
            - '**.py'
            - '.github/workflows/backend-ci.yml'
            - '**.in'          
            - '**.txt'
            - '**.ini'
            - '**.coveragerc'
    pull_request:
        branches:
            - main
            - dev
            - 'feature/*'
        paths:
            - '**.py'
            - '.github/workflows/backend-ci.yml'
            - '**.in'          
            - '**.txt'
            - '**.ini'
            - '**.coveragerc'
permissions:
    contents: read
env: 
    ENVIRONMENT: testing
    TEST_DATABASE_URL: ${{secrets.TEST_DATABASE_URL}}
jobs:
    # Build the application
    build:
        runs-on: ubuntu-latest
        # Create PostgreSQL service container 
        services:
            postgres:
                image: postgres:latest
                ports:
                    - 5432:5432
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: test_db
                # Set health checks to wait until postgres has started
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        defaults:
            run:
                working-directory: ./backend
        steps:       
            - name: Checkout the code
              uses: actions/checkout@v4
              with:
                    sparse-checkout: 
                        .github/workflows/backend-ci.yml
                        backend
            - name: Print the current directory and directory contents
              run: |
                    ls -a 
            # - name: Set up python
            #   uses: actions/setup-python@v5
            #   with:
            #       python-version: 3.12 
            #       cache: 'pip' # caching pip dependencies to speed up the build
            # - name: Install dependencies
            #   run: |
            #       python -m pip install --upgrade pip
            #       pip install -r requirements.txt
            #       pip install ruff alembic pytest coverage
            # - name: Lint with Ruff
            #   run: |
            #     pip install ruff
            #     ruff check
            #   continue-on-error: false
            # - name: Format with Ruff
            #   run: |
            #     ruff format
            #   continue-on-error: True
            # - name: Run Alembic migrations
            #   run: |            
            #     alembic upgrade head
            # - name: Test with Pytest & Coverage # tests will fail if branch coverage is less than 95%
            #   run: |
            #     coverage run -m pytest
            #     coverage  report --fail-under=95
            #   continue-on-error: false




